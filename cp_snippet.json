{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"competitive programming": {
		"prefix": "cp",
		"body": [
		  "#include <bits/stdc++.h>",
		  "",
		  "using namespace std;",
		  "",
		  "template <typename T>",
		  "void print(T t)",
		  "{",
		  "    cout << t << endl;",
		  "}",
		  "template <typename T, typename... Args>",
		  "void print(T t, Args... args) // recursive variadic function",
		  "{",
		  "    cout << t << \", \";",
		  "",
		  "    print(args...);",
		  "}",
		  "template <typename T>",
		  "void printVec(vector<T> vec)",
		  "{",
		  "    for (auto elm : vec)",
		  "    {",
		  "        cout << elm << \", \";",
		  "    }",
		  "    cout << endl;",
		  "}",
		  "",
		  "#define ar array",
		  "#define ll long long",
		  "#define ld long double",
		  "#define sz(x) ((int)x.size())",
		  "#define all(a) (a).begin(), (a).end()",
		  "",
		  "const ll INF = 1e9;",
		  "const ld EPS = 1e-9;",
		  "",
		  "void solve()",
		  "{",
		  "    int n;",
		  "    cin >> n;",
		  "    for (int i = 0; i < n; i++)",
		  "    {",
		  "        $0",
		  "    }",
		  "}",
		  "",
		  "int main()",
		  "{",
		  "    ios_base::sync_with_stdio(0);",
		  "    cin.tie(0);",
		  "    cout.tie(0);",
		  "    int tc = 1;",
		  "    cin >> tc;",
		  "    for (int t = 1; t <= tc; t++)",
		  "    {",
		  "        // cout << \"Case #\" << t << \": \";",
		  "        solve();",
		  "    }",
		  "}"
		],
		"description": ""
	  }
}
